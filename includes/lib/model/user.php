<?php


 /**
  * User Value Object.
  * This class is value object representing database table users
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */

class User {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    var $id;
    var $email;
    var $username;
    var $password;
    var $userTypeId;
    var $name;

    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    function User () {

    }

    /* function User ($idIn) {

          $this->id = $idIn;

    } */


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    function getId() {
          return $this->id;
    }
    function setId($idIn) {
          $this->id = $idIn;
    }

    function getEmail() {
          return $this->email;
    }
    function setEmail($emailIn) {
          $this->email = $emailIn;
    }

    function getUsername() {
          return $this->username;
    }
    function setUsername($usernameIn) {
          $this->username = $usernameIn;
    }

    function getPassword() {
          return $this->password;
    }
    function setPassword($passwordIn) {
          $this->password = $passwordIn;
    }

    function getUserTypeId() {
          return $this->userTypeId;
    }
    function setUserTypeId($userTypeIdIn) {
          $this->userTypeId = $userTypeIdIn;
    }

    function getName() {
          return $this->name;
    }
    function setName($nameIn) {
          $this->name = $nameIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    function setAll($idIn,
          $emailIn,
          $usernameIn,
          $passwordIn,
          $userTypeIdIn,
          $nameIn) {
          $this->id = $idIn;
          $this->email = $emailIn;
          $this->username = $usernameIn;
          $this->password = $passwordIn;
          $this->userTypeId = $userTypeIdIn;
          $this->name = $nameIn;
    }


    /** 
     * hasEqualMapping-method will compare two User instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    function hasEqualMapping($valueObject) {

          if ($valueObject->getId() != $this->id) {
                    return(false);
          }
          if ($valueObject->getEmail() != $this->email) {
                    return(false);
          }
          if ($valueObject->getUsername() != $this->username) {
                    return(false);
          }
          if ($valueObject->getPassword() != $this->password) {
                    return(false);
          }
          if ($valueObject->getUserTypeId() != $this->userTypeId) {
                    return(false);
          }
          if ($valueObject->getName() != $this->name) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    function toString() {
        $out = $this->getDaogenVersion();
        $out = $out."\nclass User, mapping to table users\n";
        $out = $out."Persistent attributes: \n"; 
        $out = $out."id = ".$this->id."\n"; 
        $out = $out."email = ".$this->email."\n"; 
        $out = $out."username = ".$this->username."\n"; 
        $out = $out."password = ".$this->password."\n"; 
        $out = $out."userTypeId = ".$this->userTypeId."\n"; 
        $out = $out."name = ".$this->name."\n"; 
        return $out;
    }

    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    function getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}

?>

